// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package openid

import (
	"encoding/json"
)

// MarshalJSON marshals as JSON.
func (a AuthenticationRequest) MarshalJSON() ([]byte, error) {
	type AuthenticationRequest struct {
		AcrValues    string `json:"acr_values,omitempty"`
		ClientID     string `json:"client_id,omitempty"`
		Display      string `json:"display,omitempty"`
		IDTokenHint  string `json:"id_token_hint,omitempty"`
		LoginHint    string `json:"login_hint,omitempty"`
		MaxAge       int64  `json:"max_age,omitempty"`
		Nonce        string `json:"nonce,omitempty"`
		Prompt       string `json:"prompt,omitempty"`
		RedirectURI  string `json:"redirect_uri,omitempty"`
		ResponseMode string `json:"response_mode,omitempty"`
		ResponseType string `json:"response_type,omitempty"`
		Scope        string `json:"scope,omitempty"`
		State        string `json:"state,omitempty"`
		UILocales    string `json:"ui_locales,omitempty"`
	}
	var enc AuthenticationRequest
	enc.AcrValues = a.AcrValues
	enc.ClientID = a.ClientID
	enc.Display = a.Display
	enc.IDTokenHint = a.IDTokenHint
	enc.LoginHint = a.LoginHint
	enc.MaxAge = a.MaxAge
	enc.Nonce = a.Nonce
	enc.Prompt = a.Prompt
	enc.RedirectURI = a.RedirectURI
	enc.ResponseMode = a.ResponseMode
	enc.ResponseType = a.ResponseType
	enc.Scope = a.Scope
	enc.State = a.State
	enc.UILocales = a.UILocales
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (a *AuthenticationRequest) UnmarshalJSON(input []byte) error {
	type AuthenticationRequest struct {
		AcrValues    *string `json:"acr_values,omitempty"`
		ClientID     *string `json:"client_id,omitempty"`
		Display      *string `json:"display,omitempty"`
		IDTokenHint  *string `json:"id_token_hint,omitempty"`
		LoginHint    *string `json:"login_hint,omitempty"`
		MaxAge       *int64  `json:"max_age,omitempty"`
		Nonce        *string `json:"nonce,omitempty"`
		Prompt       *string `json:"prompt,omitempty"`
		RedirectURI  *string `json:"redirect_uri,omitempty"`
		ResponseMode *string `json:"response_mode,omitempty"`
		ResponseType *string `json:"response_type,omitempty"`
		Scope        *string `json:"scope,omitempty"`
		State        *string `json:"state,omitempty"`
		UILocales    *string `json:"ui_locales,omitempty"`
	}
	var dec AuthenticationRequest
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.AcrValues != nil {
		a.AcrValues = *dec.AcrValues
	}
	if dec.ClientID != nil {
		a.ClientID = *dec.ClientID
	}
	if dec.Display != nil {
		a.Display = *dec.Display
	}
	if dec.IDTokenHint != nil {
		a.IDTokenHint = *dec.IDTokenHint
	}
	if dec.LoginHint != nil {
		a.LoginHint = *dec.LoginHint
	}
	if dec.MaxAge != nil {
		a.MaxAge = *dec.MaxAge
	}
	if dec.Nonce != nil {
		a.Nonce = *dec.Nonce
	}
	if dec.Prompt != nil {
		a.Prompt = *dec.Prompt
	}
	if dec.RedirectURI != nil {
		a.RedirectURI = *dec.RedirectURI
	}
	if dec.ResponseMode != nil {
		a.ResponseMode = *dec.ResponseMode
	}
	if dec.ResponseType != nil {
		a.ResponseType = *dec.ResponseType
	}
	if dec.Scope != nil {
		a.Scope = *dec.Scope
	}
	if dec.State != nil {
		a.State = *dec.State
	}
	if dec.UILocales != nil {
		a.UILocales = *dec.UILocales
	}
	return nil
}
