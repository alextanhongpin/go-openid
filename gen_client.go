// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package openid

import (
	"encoding/json"
)

// MarshalJSON marshals as JSON.
func (c Client) MarshalJSON() ([]byte, error) {
	type Client struct {
		ApplicationType              string   `json:"application_type,omitempty"`
		ClientName                   string   `json:"client_name,omitempty"`
		ClientURI                    string   `json:"client_uri,omitempty"`
		Contacts                     []string `json:"contacts,omitempty"`
		DefaultAcrValues             string   `json:"default_acr_values,omitempty"`
		DefaultMaxAge                int64    `json:"default_maxa_age,omitempty"`
		GrantTypes                   []string `json:"grant_types,omitempty"`
		IDTokenEncryptedResponseAlg  string   `json:"id_token_encrypted_response_alg,omitempty"`
		IDTokenEncryptedResponseEnc  string   `json:"id_token_encryption_response_enc,omitempty"`
		IDTokenSignedResponseAlg     string   `json:"id_token_signed_response_alg,omitempty"`
		InitiateLoginURI             string   `json:"initiate_login_uri,omitempty"`
		Jwks                         string   `json:"jwks,omitempty"`
		JwksURI                      string   `json:"jwks_uri,omitempty"`
		LogoURI                      string   `json:"logo_uri,omitempty"`
		PolicyURI                    string   `json:"policy_uri,omitempty"`
		RedirectURIs                 []string `json:"redirect_uris,omitempty"`
		RequestObjectEncryptionAlg   string   `json:"request_object_encryption_alg,omitempty"`
		RequestObjectEncryptionEnc   string   `json:"request_object_encryption_enc,omitempty"`
		RequestObjectSigningAlg      string   `json:"request_object_signing_alg,omitempty"`
		RequestURIs                  []string `json:"request_uris,omitempty"`
		RequireAuthTime              int64    `json:"require_auth_time,omitempty"`
		ResponseTypes                []string `json:"response_types,omitempty"`
		SectorIdentifierURI          string   `json:"sector_identifier_uri,omitempty"`
		SubjectType                  string   `json:"subject_type,omitempty"`
		TokenEndpointAuthMethod      string   `json:"token_endpoint_auth_method,omitempty"`
		TokenEndpointAuthSigningAlg  string   `json:"token_endpoint_auth_signing_alg,omitempty"`
		TosURI                       string   `json:"tos_uri,omitempty"`
		UserinfoEncryptedResponseAlg string   `json:"userinfo_encrypted_response_alg,omitempty"`
		UserinfoEncryptedResponseEnc string   `json:"userinfo_encrypted_response_enc,omitempty"`
		UserinfoSignedResponseAlg    string   `json:"userinfo_signed_response_alg,omitempty"`
		ClientID                     string   `json:"client_id,omitempty"`
		ClientIDIssuedAt             int64    `json:"client_id_issued_at,omitempty"`
		ClientSecret                 string   `json:"client_secret,omitempty"`
		ClientSecretExpiresAt        int64    `json:"client_secret_expires_at,omitempty"`
		RegistrationAccessToken      string   `json:"registration_access_token,omitempty"`
		RegistrationClientURI        string   `json:"registration_client_uri,omitempty"`
	}
	var enc Client
	enc.ApplicationType = c.ApplicationType
	enc.ClientName = c.ClientName
	enc.ClientURI = c.ClientURI
	enc.Contacts = c.Contacts
	enc.DefaultAcrValues = c.DefaultAcrValues
	enc.DefaultMaxAge = c.DefaultMaxAge
	enc.GrantTypes = c.GrantTypes
	enc.IDTokenEncryptedResponseAlg = c.IDTokenEncryptedResponseAlg
	enc.IDTokenEncryptedResponseEnc = c.IDTokenEncryptedResponseEnc
	enc.IDTokenSignedResponseAlg = c.IDTokenSignedResponseAlg
	enc.InitiateLoginURI = c.InitiateLoginURI
	enc.Jwks = c.Jwks
	enc.JwksURI = c.JwksURI
	enc.LogoURI = c.LogoURI
	enc.PolicyURI = c.PolicyURI
	enc.RedirectURIs = c.RedirectURIs
	enc.RequestObjectEncryptionAlg = c.RequestObjectEncryptionAlg
	enc.RequestObjectEncryptionEnc = c.RequestObjectEncryptionEnc
	enc.RequestObjectSigningAlg = c.RequestObjectSigningAlg
	enc.RequestURIs = c.RequestURIs
	enc.RequireAuthTime = c.RequireAuthTime
	enc.ResponseTypes = c.ResponseTypes
	enc.SectorIdentifierURI = c.SectorIdentifierURI
	enc.SubjectType = c.SubjectType
	enc.TokenEndpointAuthMethod = c.TokenEndpointAuthMethod
	enc.TokenEndpointAuthSigningAlg = c.TokenEndpointAuthSigningAlg
	enc.TosURI = c.TosURI
	enc.UserinfoEncryptedResponseAlg = c.UserinfoEncryptedResponseAlg
	enc.UserinfoEncryptedResponseEnc = c.UserinfoEncryptedResponseEnc
	enc.UserinfoSignedResponseAlg = c.UserinfoSignedResponseAlg
	enc.ClientID = c.ClientID
	enc.ClientIDIssuedAt = c.ClientIDIssuedAt
	enc.ClientSecret = c.ClientSecret
	enc.ClientSecretExpiresAt = c.ClientSecretExpiresAt
	enc.RegistrationAccessToken = c.RegistrationAccessToken
	enc.RegistrationClientURI = c.RegistrationClientURI
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *Client) UnmarshalJSON(input []byte) error {
	type Client struct {
		ApplicationType              *string  `json:"application_type,omitempty"`
		ClientName                   *string  `json:"client_name,omitempty"`
		ClientURI                    *string  `json:"client_uri,omitempty"`
		Contacts                     []string `json:"contacts,omitempty"`
		DefaultAcrValues             *string  `json:"default_acr_values,omitempty"`
		DefaultMaxAge                *int64   `json:"default_maxa_age,omitempty"`
		GrantTypes                   []string `json:"grant_types,omitempty"`
		IDTokenEncryptedResponseAlg  *string  `json:"id_token_encrypted_response_alg,omitempty"`
		IDTokenEncryptedResponseEnc  *string  `json:"id_token_encryption_response_enc,omitempty"`
		IDTokenSignedResponseAlg     *string  `json:"id_token_signed_response_alg,omitempty"`
		InitiateLoginURI             *string  `json:"initiate_login_uri,omitempty"`
		Jwks                         *string  `json:"jwks,omitempty"`
		JwksURI                      *string  `json:"jwks_uri,omitempty"`
		LogoURI                      *string  `json:"logo_uri,omitempty"`
		PolicyURI                    *string  `json:"policy_uri,omitempty"`
		RedirectURIs                 []string `json:"redirect_uris,omitempty"`
		RequestObjectEncryptionAlg   *string  `json:"request_object_encryption_alg,omitempty"`
		RequestObjectEncryptionEnc   *string  `json:"request_object_encryption_enc,omitempty"`
		RequestObjectSigningAlg      *string  `json:"request_object_signing_alg,omitempty"`
		RequestURIs                  []string `json:"request_uris,omitempty"`
		RequireAuthTime              *int64   `json:"require_auth_time,omitempty"`
		ResponseTypes                []string `json:"response_types,omitempty"`
		SectorIdentifierURI          *string  `json:"sector_identifier_uri,omitempty"`
		SubjectType                  *string  `json:"subject_type,omitempty"`
		TokenEndpointAuthMethod      *string  `json:"token_endpoint_auth_method,omitempty"`
		TokenEndpointAuthSigningAlg  *string  `json:"token_endpoint_auth_signing_alg,omitempty"`
		TosURI                       *string  `json:"tos_uri,omitempty"`
		UserinfoEncryptedResponseAlg *string  `json:"userinfo_encrypted_response_alg,omitempty"`
		UserinfoEncryptedResponseEnc *string  `json:"userinfo_encrypted_response_enc,omitempty"`
		UserinfoSignedResponseAlg    *string  `json:"userinfo_signed_response_alg,omitempty"`
		ClientID                     *string  `json:"client_id,omitempty"`
		ClientIDIssuedAt             *int64   `json:"client_id_issued_at,omitempty"`
		ClientSecret                 *string  `json:"client_secret,omitempty"`
		ClientSecretExpiresAt        *int64   `json:"client_secret_expires_at,omitempty"`
		RegistrationAccessToken      *string  `json:"registration_access_token,omitempty"`
		RegistrationClientURI        *string  `json:"registration_client_uri,omitempty"`
	}
	var dec Client
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ApplicationType != nil {
		c.ApplicationType = *dec.ApplicationType
	}
	if dec.ClientName != nil {
		c.ClientName = *dec.ClientName
	}
	if dec.ClientURI != nil {
		c.ClientURI = *dec.ClientURI
	}
	if dec.Contacts != nil {
		c.Contacts = dec.Contacts
	}
	if dec.DefaultAcrValues != nil {
		c.DefaultAcrValues = *dec.DefaultAcrValues
	}
	if dec.DefaultMaxAge != nil {
		c.DefaultMaxAge = *dec.DefaultMaxAge
	}
	if dec.GrantTypes != nil {
		c.GrantTypes = dec.GrantTypes
	}
	if dec.IDTokenEncryptedResponseAlg != nil {
		c.IDTokenEncryptedResponseAlg = *dec.IDTokenEncryptedResponseAlg
	}
	if dec.IDTokenEncryptedResponseEnc != nil {
		c.IDTokenEncryptedResponseEnc = *dec.IDTokenEncryptedResponseEnc
	}
	if dec.IDTokenSignedResponseAlg != nil {
		c.IDTokenSignedResponseAlg = *dec.IDTokenSignedResponseAlg
	}
	if dec.InitiateLoginURI != nil {
		c.InitiateLoginURI = *dec.InitiateLoginURI
	}
	if dec.Jwks != nil {
		c.Jwks = *dec.Jwks
	}
	if dec.JwksURI != nil {
		c.JwksURI = *dec.JwksURI
	}
	if dec.LogoURI != nil {
		c.LogoURI = *dec.LogoURI
	}
	if dec.PolicyURI != nil {
		c.PolicyURI = *dec.PolicyURI
	}
	if dec.RedirectURIs != nil {
		c.RedirectURIs = dec.RedirectURIs
	}
	if dec.RequestObjectEncryptionAlg != nil {
		c.RequestObjectEncryptionAlg = *dec.RequestObjectEncryptionAlg
	}
	if dec.RequestObjectEncryptionEnc != nil {
		c.RequestObjectEncryptionEnc = *dec.RequestObjectEncryptionEnc
	}
	if dec.RequestObjectSigningAlg != nil {
		c.RequestObjectSigningAlg = *dec.RequestObjectSigningAlg
	}
	if dec.RequestURIs != nil {
		c.RequestURIs = dec.RequestURIs
	}
	if dec.RequireAuthTime != nil {
		c.RequireAuthTime = *dec.RequireAuthTime
	}
	if dec.ResponseTypes != nil {
		c.ResponseTypes = dec.ResponseTypes
	}
	if dec.SectorIdentifierURI != nil {
		c.SectorIdentifierURI = *dec.SectorIdentifierURI
	}
	if dec.SubjectType != nil {
		c.SubjectType = *dec.SubjectType
	}
	if dec.TokenEndpointAuthMethod != nil {
		c.TokenEndpointAuthMethod = *dec.TokenEndpointAuthMethod
	}
	if dec.TokenEndpointAuthSigningAlg != nil {
		c.TokenEndpointAuthSigningAlg = *dec.TokenEndpointAuthSigningAlg
	}
	if dec.TosURI != nil {
		c.TosURI = *dec.TosURI
	}
	if dec.UserinfoEncryptedResponseAlg != nil {
		c.UserinfoEncryptedResponseAlg = *dec.UserinfoEncryptedResponseAlg
	}
	if dec.UserinfoEncryptedResponseEnc != nil {
		c.UserinfoEncryptedResponseEnc = *dec.UserinfoEncryptedResponseEnc
	}
	if dec.UserinfoSignedResponseAlg != nil {
		c.UserinfoSignedResponseAlg = *dec.UserinfoSignedResponseAlg
	}
	if dec.ClientID != nil {
		c.ClientID = *dec.ClientID
	}
	if dec.ClientIDIssuedAt != nil {
		c.ClientIDIssuedAt = *dec.ClientIDIssuedAt
	}
	if dec.ClientSecret != nil {
		c.ClientSecret = *dec.ClientSecret
	}
	if dec.ClientSecretExpiresAt != nil {
		c.ClientSecretExpiresAt = *dec.ClientSecretExpiresAt
	}
	if dec.RegistrationAccessToken != nil {
		c.RegistrationAccessToken = *dec.RegistrationAccessToken
	}
	if dec.RegistrationClientURI != nil {
		c.RegistrationClientURI = *dec.RegistrationClientURI
	}
	return nil
}
